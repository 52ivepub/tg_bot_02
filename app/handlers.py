import asyncio
import os
from aiogram.filters import CommandObject, CommandStart, Command
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram import F, Dispatcher, Router
from aiogram.utils.chat_action import ChatActionSender
import app.keyboards as kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.questions import questions
from filters.is_admin import IsAdmin
from config import bot, admins
from config import all_media_dir





handlers_router = Router()


class Reg(StatesGroup):
    name = State()
    number = State()



@handlers_router.message(F.text.upper().contains('–ü–†–ò–í'))
async def cmd_start(message: Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}  ID: {message.from_user.id}",
                        reply_markup=kb.main)


@handlers_router.message(Command(commands=['help', 'problem']))
async def get_help(message: Message):
    await message.answer('–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å ?')

@handlers_router.message(F.text.upper().contains('–ö–ê–ö –î–ï–õ–ê?') )
async def how_are_you(message: Message):
    await message.answer('–ë–ª—è—Å—Ç—è—â–µ')


@handlers_router.message(F.photo)
async def how_are_you(message: Message):
    await message.answer(f' ID photo {message.photo[-1].file_id}')

@handlers_router.message(Command('get_photo'))
async def get_photo(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAMIaAS80cMj54gNeW9gy9AMXbmtnX4AAoXrMRutnyhIr1a44I7dIy0BAAMCAAN5AAM2BA',
                               caption='Image')
    
@handlers_router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞')
async def how_are_you(message: Message):
    await message.answer('–í–æ—Ç –∫–æ—Ä–∑–∏–Ω–∫–∞')

@handlers_router.message(F.text == '–û –Ω–∞—Å')
async def how_are_you(message: Message):
    await message.reply("–ú—ã –µ—Å—Ç—å –Ω–∞:", reply_markup=kb.ease_link_kb())


@handlers_router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')


@handlers_router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@handlers_router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@handlers_router.message(Reg.number)
async def two_three(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nName: {data["name"]}\nNumber: {data["number"]}')
    await state.clear()


@handlers_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω')
async def get_inline_link(message: Message):
    await message.answer('–í–æ—Ç –∏–Ω–ª–∞–π–Ω', reply_markup=kb.get_inline_kb())

# @handlers_router.callback_query(F.data == 'back_home')
# async def get_inline_link(call: CallbackQuery):
#     # await call.answer()
#     await call.answer('–í–æ—Ç –≥–ª–∞–≤–Ω–∞—è')
#     await call.message.answer(reply_markup=)


@handlers_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user = kb.get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@handlers_router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery):
    await call.message.answer(text='–≤–æ—Ç', reply_markup=kb.main, )
    await call.answer()


@handlers_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,', reply_markup=kb.create_qst_inline_kb(questions))


@handlers_router.callback_query(F.data.startswith("qst_"))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(msg_text, reply_markup=kb.create_qst_inline_kb(questions))



@handlers_router.message(Command(commands=["settings", "about"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    command_name = 'settings' if 'settings' in message.text else 'about'
    response = f'–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name}'
    if command_args:
        response += f' —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>'
    else:
        response += ' –±–µ–∑ –º–µ—Ç–∫–∏'
    await message.answer(response)




@handlers_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'), IsAdmin(admins))
async def process_find_word(message: Message):
    await message.answer('–û, –∞–¥–º–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞! –ê —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è.')


@handlers_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@handlers_router.message(F.text.lower().contains('—Ç—ç–≥–∏'))
async def process_find_word(message: Message):
    await message.answer(
                        "<b>–ñ–∏—Ä–Ω—ã–π</b>\n"
                        "<i>–ö—É—Ä—Å–∏–≤</i>\n"
                        "<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
                        "<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>\n"
                        "<tg-spoiler>–°–ø–æ–π–ª–µ—Ä (—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç)</tg-spoiler>\n"
                        "<a href='http://www.example.com/'>–°—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ</a>\n"
                        "<code>–ö–æ–¥ —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ</code>\n"
                        "<pre>–°–ø–æ–π–ª–µ—Ä —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞</pre>\n"
                        )



# @handlers_router.message(Command('send_audio'))
# async def cmd_start(message: Message, state: FSMContext):
#     audio_file = FSInputFile(path=os.path.join(all_media_dir, 'audio.mp3'), filename='1')
#     await message.answer_audio(audio=audio_file)


@handlers_router.message(Command('send_audio'))
async def cmd_start(message: Message, state: FSMContext):
    audio_file = FSInputFile(path=os.path.join(all_media_dir, 'audio.mp3'))
    msg_id = await message.answer_audio(audio=audio_file, reply_markup=kb.main_kb(message.from_user.id),
                                        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–∞–π–ª—É</b>')
    print(msg_id.audio.file_id)

    # 'CQACAgIAAxkDAAIBrWgUFvZyI7yjFwbF7u7goYyglU4xAAIPZQACoDChSMBTqKlDUqwtNgQ'


@handlers_router.message(Command('send_audio_2'))
async def cmd_start(message: Message, state: FSMContext):
    # audio_file = FSInputFile(path=os.path.join(all_media_dir, 'new_message_tone.mp3'))
    audio_id = 'CQACAgIAAxkDAAIBrWgUFvZyI7yjFwbF7u7goYyglU4xAAIPZQACoDChSMBTqKlDUqwtNgQ'
    msg_id = await message.answer_audio(audio=audio_id, reply_markup=kb.main_kb(message.from_user.id),
                                        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–∞–π–ª—É</b>')
    

@handlers_router.message(Command('send_photo'))
async def cmd_start(message: Message, state: FSMContext):
    photo_file = FSInputFile(path=os.path.join(all_media_dir, 'image.jpg'))
    msg_id = await message.answer_photo(photo=photo_file, reply_markup=kb.main_kb(message.from_user.id),
                                        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–æ—Ç–æ</b>')
    print(msg_id.photo[-1].file_id)


@handlers_router.message(Command('link_photo'))
async def cmd_start(message: Message, state: FSMContext):
    photo_url = 'https://indirimlerce.com/wp-content/uploads/2023/02/phyton-ile-neler-yapilabilir.jpg'
    msg_id = await message.answer_photo(photo=photo_url, reply_markup=kb.main_kb(message.from_user.id),
                                        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–æ—Ç–æ</b>')
    print(msg_id.photo[-1].file_id)


@handlers_router.message(Command('send_video'))
async def cmd_start(message: Message, state: FSMContext):
    video_file = FSInputFile(path=os.path.join(all_media_dir, 'video.mp4'))
    msg = await message.answer_video(video=video_file, reply_markup=kb.main_kb(message.from_user.id),
                                     caption='–ú–æ—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É')
    await asyncio.sleep(2)
    await message.answer_video(video=msg.video.file_id, caption='–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–æ–º—É –∂–µ –≤–∏–¥–æ—Å—É',
                               reply_markup=kb.main_kb(message.from_user.id))
    await msg.delete()


@handlers_router.message(Command('send_voice'))
async def cmd_start(message: Message, state: FSMContext):
    async with ChatActionSender.record_voice(bot=bot, chat_id=message.from_user.id):
        await asyncio.sleep(3)
        await message.answer_voice(voice=FSInputFile(
            path=os.path.join(all_media_dir, 'audio.mp3')))